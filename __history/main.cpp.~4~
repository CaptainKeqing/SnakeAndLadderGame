#include "PlayerClass.h"
#include <iostream>
#include <vector>
#include <functional>
#include <random>
#include <ctime>
#include <chrono>
#include <thread>

int getRandomNumber(int min, int max)
{
	static constexpr double fraction{ 1.0 / (RAND_MAX + 1.0) };  // static used for efficiency, so we only calculate this value once
	// evenly distribute the random number across our range
	return min + static_cast<int>((max - min + 1) * (std::rand() * fraction));
}

void playerTurn(Player& player) {
	std::cout << player.getName() << "'s turn.\n";
	std::cout << "Press enter to roll dice:";
	std::cin.ignore();
	int randNum{ getRandomNumber(1, 6) };
	std::cout << "Rolling... ";
	std::this_thread::sleep_for(static_cast<std::chrono::milliseconds>(500));
	std::cout << randNum << '\n';
	player.move(randNum);
}

const std::vector<Player> setupGame() {
	// setup randomiser
	std::srand(static_cast<unsigned int>(std::time(nullptr)));
	std::rand();	// throw first value away.

	std::cout << "How many players are playing today? ";
	int numPlayers{};
	std::cin >> numPlayers;
	std::vector<Player> players;
	std::string name{};
	for (int i = 0; i < numPlayers; i++)
	{
		std::cout << "Name of player " << i + 1 << ": ";
		std::getline(std::cin >> std::ws, name);
		players.push_back(Player{ name });
	}
	std::cout << "Welcome ";
	for (const auto& player : players) {
		std::cout << player.getName() << ", ";
	}
	std::cout << "\n\n";
	return players;

}

void playGame(std::vector<Player>& players) {
	while (true)
	{
		for (Player& player : players) {
			playerTurn(player);
			if (player.hasWon) {
				std::cout << player.getName() << " won!\n";
				break;
			}
		}
	}
}

int main() {
	//Player player{ "Donovan" };
	//std::cout << "Welcome, " << player.getName() << '\n';
	//std::cout << player.getPos() << '\n';
	////player.move(2);
	////player.move(80);
	////player.move(4);
	//playGame(player);
	std::vector<Player> players{ setupGame() };
	playGame(players);
	return 0;
}